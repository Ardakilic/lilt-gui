name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [22.19.0]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint:check

    - name: Run type check
      run: npm run typecheck

    - name: Run tests with coverage
      run: npm run test:coverage

  build-macos:
    needs: test
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: 22
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install macOS-specific dependencies
      run: npm install dmg-license

    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install setuptools

    - name: Build application
      run: npm run build

    - name: Build Electron app (macOS - Intel x64)
      run: |
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Python version: $(python3 --version)"
        npx electron-builder --mac --x64
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ELECTRON_CACHE: ${{ runner.temp }}/electron-cache
        ELECTRON_BUILDER_CACHE: ${{ runner.temp }}/electron-builder-cache
        DEBUG: electron-builder

    - name: Build Electron app (macOS - Apple Silicon ARM64)
      run: |
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Python version: $(python3 --version)"
        npx electron-builder --mac --arm64
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ELECTRON_CACHE: ${{ runner.temp }}/electron-cache
        ELECTRON_BUILDER_CACHE: ${{ runner.temp }}/electron-builder-cache
        DEBUG: electron-builder

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lilt-gui-macos
        path: |
          release/*.dmg
          release/**/*.dmg
          release/**/*.zip

  build-windows:
    needs: test
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: 22
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Build Electron app (Windows - x64)
      run: npx electron-builder --win --x64
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Electron app (Windows - ARM64)
      run: npx electron-builder --win --arm64
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lilt-gui-windows
        path: |
          release/*.exe
          release/**/*.exe
          release/**/*.msi

  build-linux:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: 22
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Build Electron app (Linux - x64)
      run: npx electron-builder --linux --x64
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Electron app (Linux - ARM64)
      run: npx electron-builder --linux --arm64
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lilt-gui-linux
        path: |
          release/*.AppImage
          release/*.deb
          release/**/*.AppImage
          release/**/*.deb

  release:
    needs: [build-macos, build-windows, build-linux]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: 22
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download all artifacts
      uses: actions/download-artifact@v5

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          lilt-gui-macos/*.dmg
          lilt-gui-macos/**/*.dmg
          lilt-gui-macos/**/*.zip
          lilt-gui-windows/*.exe
          lilt-gui-windows/**/*.exe
          lilt-gui-windows/**/*.msi
          lilt-gui-linux/*.AppImage
          lilt-gui-linux/*.deb
          lilt-gui-linux/**/*.AppImage
          lilt-gui-linux/**/*.deb
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

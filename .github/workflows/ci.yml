name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.20.0"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests with coverage
        run: npm run test:coverage

  build:
    name: Build ${{ matrix.platform-name }}
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-24.04, windows-latest, macos-latest]
        include:
          - platform: ubuntu-24.04
            platform-name: Linux x64
            rust-target: x86_64-unknown-linux-gnu
          - platform: windows-latest
            platform-name: Windows x64
            rust-target: x86_64-pc-windows-msvc
          - platform: macos-latest
            platform-name: macOS x64
            rust-target: x86_64-apple-darwin

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-target }}

      - name: Install dependencies (Linux)
        if: matrix.platform == 'ubuntu-24.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: npm ci

      - name: Build
        run: npm run tauri:build

      - name: Upload artifacts (Linux x64)
        if: matrix.platform == 'ubuntu-24.04'
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64-build
          path: |
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/appimage/*.AppImage

      - name: Upload artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe

      - name: Upload artifacts (macOS)
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            src-tauri/target/release/bundle/dmg/*.dmg
            src-tauri/target/release/bundle/macos/*.app

  build-arm:
    name: Build ${{ matrix.platform-name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-24.04
            platform-name: Linux ARM64
            rust-target: aarch64-unknown-linux-gnu
            arch: aarch64
          - platform: macos-latest
            platform-name: macOS ARM64 (Apple Silicon)
            rust-target: aarch64-apple-darwin
            arch: arm64
          - platform: windows-latest
            platform-name: Windows ARM64
            rust-target: aarch64-pc-windows-msvc
            arch: arm64

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-target }}

      - name: Install dependencies (Linux ARM64)
        if: matrix.platform == 'ubuntu-24.04'
        run: |
          sudo dpkg --add-architecture arm64
          # Completely disable ARM64 for all existing Ubuntu repos to prevent 404 errors
          # GitHub Actions has multiple source files we need to handle
          sudo sed -i 's/^deb /deb [arch=amd64] /' /etc/apt/sources.list
          sudo sed -i 's/^deb /deb [arch=amd64] /' /etc/apt/sources.list.d/*.list || true
          # Add ARM64-only sources using Ubuntu Ports (the ONLY repository for ARM64 packages)
          sudo bash -c 'cat > /etc/apt/sources.list.d/arm64.list <<EOF
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble-updates main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble-backports main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble-security main restricted universe multiverse
          EOF'
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev:arm64 \
            libgtk-3-dev:arm64 \
            libayatana-appindicator3-dev:arm64 \
            librsvg2-dev:arm64 \
            patchelf:arm64 \
            libssl-dev:arm64

      - name: Install frontend dependencies
        run: npm ci

      - name: Build (Linux ARM64)
        if: matrix.platform == 'ubuntu-24.04'
        env:
          PKG_CONFIG_SYSROOT_DIR: /
          PKG_CONFIG_PATH: /usr/lib/aarch64-linux-gnu/pkgconfig
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          CXX_aarch64_unknown_linux_gnu: aarch64-linux-gnu-g++
        run: npm run tauri:build -- --target ${{ matrix.rust-target }}

      - name: Build (macOS ARM)
        if: matrix.platform == 'macos-latest'
        run: npm run tauri:build -- --target ${{ matrix.rust-target }}

      - name: Build (Windows ARM)
        if: matrix.platform == 'windows-latest'
        run: npm run tauri:build -- --target ${{ matrix.rust-target }}

      - name: Upload artifacts (Linux ARM64)
        if: matrix.platform == 'ubuntu-24.04'
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64-build
          path: |
            src-tauri/target/${{ matrix.rust-target }}/release/bundle/deb/*.deb
            src-tauri/target/${{ matrix.rust-target }}/release/bundle/appimage/*.AppImage

      - name: Upload artifacts (macOS ARM)
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64-build
          path: |
            src-tauri/target/${{ matrix.rust-target }}/release/bundle/dmg/*.dmg

      - name: Upload artifacts (Windows ARM)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-arm64-build
          path: |
            src-tauri/target/${{ matrix.rust-target }}/release/bundle/msi/*.msi
            src-tauri/target/${{ matrix.rust-target }}/release/bundle/nsis/*.exe
